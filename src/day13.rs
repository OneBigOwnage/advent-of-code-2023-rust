use std::fmt::Display;

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
enum Split {
    Horizontal,
    Vertical,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
enum ObjectType {
    Ash,
    Rocks,
}

#[derive(Debug, Clone, PartialEq, Eq)]
struct Pattern {
    objects: Vec<Vec<ObjectType>>,
    split: Option<Split>,
    mirrored_after: Option<usize>,
}

type Point = (usize, usize);

#[derive(Debug, Clone)]
struct SmudgedPattern<'a> {
    original: &'a Pattern,
    potential_patterns: Vec<(Pattern, Point)>,
}

impl Display for Pattern {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut output = String::new();

        for line in &self.objects {
            for ch in line {
                output.push_str(match ch {
                    ObjectType::Ash => ".",
                    ObjectType::Rocks => "#",
                });
            }

            output.push_str("\n");
        }

        write!(f, "{}", output)
    }
}

fn main() {
    assert_eq!(405, part1(&test_input()));
    assert_eq!(27202, part1(&input()));
    assert_eq!(400, part2(&test_input()));
    assert_eq!(41566, part2(&input()));
}

fn part1(input: &String) -> usize {
    parse(input)
        .iter_mut()
        .map(|pattern| {
            let binding = find_mirror_line(pattern);
            let (split, after) = binding.first().unwrap();
            pattern.mirrored_after = Some(*after);
            pattern.split = Some(*split);

            pattern
        })
        .map(|pattern| match pattern.split {
            Some(Split::Vertical) => pattern.mirrored_after.unwrap() + 1,
            Some(Split::Horizontal) => (pattern.mirrored_after.unwrap() + 1) * 100,
            _ => panic!("The split should have been set"),
        })
        .sum()
}

fn part2(input: &String) -> usize {
    parse(input)
        .iter_mut()
        .map(|pattern| {
            let binding = find_mirror_line(pattern);
            let (split, after) = binding.first().unwrap();
            pattern.mirrored_after = Some(*after);
            pattern.split = Some(*split);

            let mut potential_patterns: Vec<(Pattern, Point)> = vec![];

            for i in 0..pattern.objects.len() {
                for ii in 0..pattern.objects[0].len() {
                    let mut potential = pattern.clone();

                    potential.objects[i][ii] = match potential.objects[i][ii] {
                        ObjectType::Ash => ObjectType::Rocks,
                        ObjectType::Rocks => ObjectType::Ash,
                    };

                    potential_patterns.push((potential, (ii, i)));
                }
            }

            let all_smudged = SmudgedPattern {
                original: pattern,
                potential_patterns: potential_patterns.clone(),
            };

            let mut valid_smudged = SmudgedPattern {
                original: pattern,
                potential_patterns: vec![],
            };

            for potential in &all_smudged.potential_patterns {
                for result in find_mirror_line(&potential.0) {
                    if result.0 == all_smudged.original.split.unwrap()
                        && result.1 == all_smudged.original.mirrored_after.unwrap()
                    {
                        continue;
                    }

                    valid_smudged.potential_patterns.push((
                        Pattern {
                            objects: potential.0.objects.clone(),
                            split: Some(result.0),
                            mirrored_after: Some(result.1),
                        },
                        potential.1,
                    ));
                }
            }

            valid_smudged
        })
        .map(|smudged| {
            if let Some(valid) = &smudged.potential_patterns.first() {
                match valid.0.split {
                    Some(Split::Vertical) => valid.0.mirrored_after.unwrap() + 1,
                    Some(Split::Horizontal) => (valid.0.mirrored_after.unwrap() + 1) * 100,
                    _ => panic!("The split should have been set"),
                }
            } else {
                panic!("We couldn't find any smudges that result in a new and valid mirror line!");
            }
        })
        .sum()
}

fn find_mirror_line(pattern: &Pattern) -> Vec<(Split, usize)> {
    let mut mirror_lines = vec![];

    mirror_lines.extend(find_horizontal_mirror_lines(&pattern));

    let rotated = rotate_objects_clockwise(&pattern);

    mirror_lines.extend(
        find_horizontal_mirror_lines(&rotated)
            .iter()
            .map(|(_, after)| (Split::Vertical, *after))
            .collect::<Vec<(Split, usize)>>(),
    );

    mirror_lines
}

fn find_horizontal_mirror_lines(pattern: &Pattern) -> Vec<(Split, usize)> {
    let mut mirror_lines = vec![];

    let width = pattern.objects[0].len();

    'mirror_line: for line_nr in 0..pattern.objects.len() - 1 {
        // Check if "after" this line is the mirror line.
        for check_iter in 0..=line_nr {
            // When either of the lines isn't present, we can ignore it
            if pattern.objects.get(line_nr - check_iter).is_none()
                || pattern.objects.get(line_nr + check_iter + 1).is_none()
            {
                mirror_lines.push((Split::Horizontal, line_nr));
                continue;
            }

            for char_index in 0..width {
                if pattern.objects.get(line_nr - check_iter).unwrap()[char_index]
                    != pattern.objects.get(line_nr + check_iter + 1).unwrap()[char_index]
                {
                    continue 'mirror_line;
                }
            }
        }

        mirror_lines.push((Split::Horizontal, line_nr));
    }

    mirror_lines.sort();
    mirror_lines.dedup();

    mirror_lines
}

fn rotate_objects_clockwise(original: &Pattern) -> Pattern {
    let width = original.objects[0].len();
    let height = original.objects.len();

    let mut rotated: Vec<Vec<ObjectType>> = vec![vec![]; width];

    for i in 0..height {
        for ii in 0..width {
            rotated[ii].push(original.objects[height - 1 - i][ii]);
        }
    }

    Pattern {
        objects: rotated,
        split: None,
        mirrored_after: None,
    }
}

fn parse(input: &str) -> Vec<Pattern> {
    input
        .split("\n\n")
        .map(|raw| {
            let objects: Vec<Vec<ObjectType>> = raw
                .split("\n")
                .map(|row| {
                    row.chars()
                        .map(|ch| match ch {
                            '.' => ObjectType::Ash,
                            '#' => ObjectType::Rocks,
                            other => {
                                panic!("We encountered '{other}', which is not ash and not rocks")
                            }
                        })
                        .collect()
                })
                .collect();

            Pattern {
                objects,
                split: None,
                mirrored_after: None,
            }
        })
        .collect()
}

#[allow(dead_code)]
fn test_input() -> String {
    "#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#"
        .to_string()
}

#[allow(dead_code)]
fn input() -> String {
    ".####..#.#.#.##..
........#..##....
..##..#.....#..##
......##.##.#####
######.#.####....
..##....#..##.#..
.#..#..#####.#...
..##...#..#...#.#
#######.#....####

#.###..####
..#####....
#.##...####
##..#.##..#
##.#.##.##.
##.#.##.##.
##..#.##..#
#.##...####
..###.#....
#.###..####
.##....#..#

.##...#...#####
...######..#.#.
..#.#..#.####..
#..#...##.##..#
#..#...##.##..#
..#.#..#.####..
#..######..#.#.
.##...#...#####
#..#..#.#...#.#
####.#####..#..
....#.##..##...
#..######..#.##
##.#...#..##.#.
##.#...#..##.#.
#..######..#.##
....#.##..##...
####.#####..#..

#####..#####.##
.............##
#..######..##..
.##.#..#.##.#.#
....####....##.
#..##..##..###.
#.########.#.#.
.##..##..##...#
#..##..##..##..
####....####..#
....####....#..

...#....##...
.#.##....#...
#..##.####.#.
#.#####.##.#.
##...#.##.#.#
##...#.##.#.#
#.#####.##.#.
#..##.####.#.
.#.##....#...
...#....##...
...#....##...
.#.##....#...
#..##.####.#.
#.###.#.##.#.
##...#.##.#.#

####.##.#..#.#...
....##.####.#.#..
....##.####.#.#..
####.##.#..#.#...
..#####...####.##
#####..##.###...#
.##...##.....###.
.##...##.....###.
#####..##.###...#
..#####...####.##
#.##.##.#..#.#...

#.##########.
##.#..##..#.#
..#.##..##.#.
#...#....#...
##.#......#.#
#.#.#....#.#.
###...##...##
###...##...##
#.#.#....#.#.
##.#......#.#
....#....#...

....##....##.....
.####.####.####..
###....##....###.
###....##....###.
.####.####.####..
....##....##.....
..##..#..#..##..#
.###############.
.##.#..##..#.##..

####.#..#.####..#
####..##..#######
#.#.#.##.#.#.####
##.#..##..#.##..#
.#####...####....
.###.#..#.###....
.##..#..#..##....
..#.######.#..##.
#..#......#..#..#
######..######..#
#.##..##..##.####
..##.####.##..##.
...##.##.##...##.
..#.#....#.#..##.
.##..#..#..##.##.
#####....########
##..##..##..#####

..###.#..#.##
#####.####.##
...##.#..#.##
...##.####.##
###.#......#.
###..######..
###..........
..##..##.#..#
...###.##.###

##...####...###
##...####...###
#....#..#....##
##..........###
#.##########.#.
..#..#..#.##...
.#...####...#.#
#..#.####.#..#.
.##..####..##.#
###..####..###.
#..##.##.##..#.
#.#........#.#.
#.....##.....#.

#..#####.#.
.#.#...####
.##.#####.#
#...###.#.#
#..####.#.#
.##.#####.#
.#.#...####
#..#####.#.
####..#..##
####....##.
####....##.
####..#..##
#..#####.#.
.#.#...####
.##.#####.#

.######.####...
..#..#....##...
..#..#....##...
.######.####...
###..######.##.
.........#..###
..#####.#.#####
#.#..#.##.....#
.##..##....####
...##...##..#..
.#....#.#.#..##
...##....#####.
.#.##.#.###.###

###.#...#.#.##.#.
#.#...####...#..#
#.#...####...#..#
###.#...#.#.##.#.
..####..#####....
.....###...#..###
.....###...#..###
..####..#####....
###.#...#.#.##.##

##.#..##.##.#
.#...........
.#####...##..
##.#...#.##.#
...#.###.##.#
.##..#..#..#.
#.##..#......
#..###..#..#.
#.#.##.......
...#.###.##.#
.#.###.#....#
##..#....##..
#..##########
##.##########
##..#....##..
.#.###.#....#
...#.###.##.#

##.######.##.
...#....#..##
####....#####
...#.##.#....
###..##..###.
#..######..##
..#.#..#.#..#
#.##.##.##.##
...##..##....
##...##...###
##...##...###
...##..##....
#.##.##.##.##
..#.#..#.#..#
#..######..##
###..##..###.
...#.##.#....

####..#.#####
#..#...##.##.
.##.##.######
#..#...#.....
#..#.##..####
###.#..#.....
#..###..#....
#..#......##.
####..##..##.

###......
..#.##..#
...######
...###...
###.#####
#..##....
#..##....
###.#####
...###...

..##..#########
####.....#.#.#.
###.#..####.###
.#..##..####.#.
#.#.##.##......
....####..#..##
###.##..##.....
.#..##....###.#
.#..##....###.#
###.##..##.....
....####..#..##
#.#.##.##......
.#..##..####.#.
###.#..####.###
####....##.#.#.
..##..#########
..##..#########

......#.##.#.
#....#......#
##..###....##
.#..#..#..#..
#....########
.#..#...##...
.#..#.##..##.
##..#########
..##........#
######......#
.####...##...
.#..#...##...
#....#......#
..##..#....#.
##..###....##

.###.###.
#.#..####
###.##.#.
###.##.##
#.#..####
.###.###.
.###.###.
#.#..####
###.##.##
###.##.#.
#.#..####
.###.###.
#...#.#.#

.#....#..
.##...#..
.###.##..
#.##.#...
.####..##
#.#.#.###
..#...#..
##...#...
##..####.
##..####.
##...#...
..#...#..
#.#.#.###
.####..##
#.##.#...
.###.##..
.##...#..

#..##....##..
.##.#.##....#
#..#.#..#..#.
#####....##..
....##.##...#
#..#...######
#..####.#..#.
.##.###..##..
....###......
.##..#..####.
#..###.#.##.#
.......######
.....####..##

####.#..##.##
.##.########.
.##.#.#..##.#
....#.#.#.###
.##..#.##.###
#..##..###.##
#####.###....
######.#.#..#
.##....###...
.........##.#
#####.##.#...
#..###.##.##.
....###.#..##
######.#..#.#
#..#.#.#..###
#..#.#.#..#.#
######.#..#.#

.#.#.####
.###.#..#
#..#.....
..#...##.
..#.##..#
.#.#.....
...#.####
###......
...###..#
...###..#
.##......

#....####..
.##.##..###
.....####..
.#..#...#.#
..#...#..#.
####.#.##..
####.#.##..
..#...#..#.
.#..#...#.#
.....####..
.##.##..###
#....####..
.....####..

.#..#..#.
#.#.####.
.#.######
#..######
####.##.#
####.##.#
....#..#.
..##....#
###......
###......
..##....#
....#..#.
.###.##.#

.#.##...#..##
#.#.#.#...#.#
.##.....##.#.
.##..##..####
...#.#####.##
#.#####..#...
#.#####..#...
.#.#.#####.##
.##..##..####
.##.....##.#.
#.#.#.#...#.#
.#.##...#..##
.#.##...#..##

####...##.#..##..
#######........##
..#..##.#....##.#
##....##..###.#.#
.####..###...###.
..#.###.#..#.#..#
..#.###.#..#.#..#
.####..###...###.
##....##..###.#.#
..#..##.#....##.#
#######........##
####...##.#..##..
#..#...#.##.##.#.
.###.#..#.###.#.#
.###.##.#.###.#.#
#..#...#.##.##.#.
####...##.#..##..

#...####.#.....
#..#.#.#.....#.
####.#.#....##.
#..#...#.#.####
.##......#.##..
.##...#####....
.##.#..#.......
.##.#..#.......
.##...#####....
.##......#.##..
#..#...#.#.####

.###.#.....
...##..#.#.
##....##...
..#..#.#...
##.##.##..#
##.##.##..#
..#..#.#...
##....##...
...##..#.#.
.###.#.....
..#.#.###.#
##.##..#.##
##.##..#.#.

.#....#.#.#.#....
#.####.#...####..
#..##..##.##..###
.#.##.#..#####.##
#..##..##.#....##
#.#..#.#.#.#.#...
.######....#.#...
#.####.#....#.###
...##...###..##..
..#..#..#.##..#..
#..##..#.#.##.#..
.#....#.#..##..##
##..#.###.####.##

.##..##.###
.######.#..
###..###...
#.#..#.###.
##....##...
##....###..
#..##..#.##
#########.#
.#.##.#..#.
..#..#...##
.#....#.##.
.#....#.##.
..#..#....#
.#.##.#..#.
#########.#
#..##..#.##
##....###..

#...#.#..#.
####.#..#.#
##.#..####.
#.###.#..#.
......####.
.###.######
#.#.##.##.#
...###....#
.....#....#
##..#..##..
##.#.######
##.#.######
##..#..##..
.....#....#
...###....#
#.#.##.##.#
.###.######

#.#####...#......
#.#####...#......
.##...###..#.#...
.#.####.####...#.
....##..#.##...##
###...#..#.##...#
....##.#.##.#.##.
##.#.#....#####.#
..##.#.#..###.#.#
##.###.####.#...#
#..###.####.#...#
..##.#.#..###.#.#
##.#.#....#####.#
....##.#.##.#.##.
###...#..#.##...#

##..###
.####..
#....##
..##...
#.##...
##..###
#.##.##

.#.#..#....##...#
.###..#....##...#
.#####.##..#.#..#
#.##.##.#........
#.##.##.#........
.#####.##..#.#..#
.###..#....##...#
.#.#..#....##...#
###..#..###.##.#.
##.....###.#..###
####...####..####

##..##.##.#
#...###..##
.#...######
#..##......
.##########
###........
###.#......
..#.#......
#.#.#######
.#..###..##
#.#.#......
.######..##
...#.######
..#.#..##..
..#####..##
#.#########
##.########

..##..#..
#.#..##..
#..#####.
.####...#
.####...#
#..####..
#.#..##..
..##..#..
##..#....
..#....##
..#....##
##..#....
..##..#..

.#..#....
#.##.###.
#....####
#....##.#
#.##.#..#
##..##.#.
#....#.#.
#....#..#
#....##.#
#....#.#.
##..##.#.
#.##.#..#
#....##.#
#....####
#.##.###.
.#..#....
##..###..

...####.##..#
#.....####..#
...#...#.#..#
###..#.###..#
.#.#.##.#.##.
...#.##.#.##.
###..#.###..#
...#...#.#..#
#.....####..#
...####.##..#
.....###.####

#.##...
.#.#...
##.#.##
.#.####
.#.##..
.##.#..
.###.##
#.#..##
..###..
.####..
.###...

.##..##.########.
.#.##.#...####...
.######.#.#..#.#.
.##..##.##....##.
.######.#.####.#.
########..#..#..#
..#..#..#.#..#.#.
..#..#..#.#..#.#.
.#......#.####.#.

#...###..##..##
.###..#####..##
.##.#.##.#.##.#
..#..###.##..##
#...#....##..##
##.#####..####.
#####...#.#..#.
###..#..###..##
###.###.#######
#...##...#....#
##.#.#.#.#.##.#
##.#.#.#.#.##.#
#...###..#....#

.#.##.#..##.#..
##..#.##.##..##
.#.#.#.....#...
#...###.####.##
#.#..#.##.##...
###..#.##.##...
#...###.####.##
.#.#.#.....#...
##..#.##.##..##
.#.##.#..##.#..
...#.#...#.##..
..###.#..####..
##..####.#.....
######.##...###
..#.....#.##.##

......#
......#
..#..#.
####.#.
..#.##.
##.##..
..#.###
...###.
##.###.
...###.
..#...#
##...#.
##...#.
####.##
##.#.##
###..#.
.#.##.#

..####..#.#...#..
.#....#.######..#
.#.##.#.....#....
.#.##.#.....#....
.#....#.######..#
..####..#.#...#..
..####..####.####
##....##..#.###..
.......##......#.

###..##..
..#.#..#.
###.####.
##..####.
...#....#
##.#.####
...######
...######
..#.#..#.
..#######
##.......
..#..##..
..#......
##...##..
#####..##

##........##...
...######......
..##....##..##.
###..##..######
##..#..#..#####
..###..###..###
.....##.....#.#
..#.####.#...#.
###..##..####..
...######.....#
..#..##..#..#..
#...####...#..#
##.#....#.##...
###......###.#.
..###..###..#..
###.#..#.####..
..#..##..#..#.#

#...##.#.
#...#..#.
...#.#...
.######..
.....#.#.
.#...####
..#..#...
..#..#...
.#...####
.....#.#.
.######..
...#.#...
#...#..#.
#...##.#.
#.#..#.##
#.#.##..#
.#.###.##

.######....#.#.
.........#...##
.#....#.#.#....
..#..#....#.###
#.####.##..#..#
...##...#..####
...##...#..####
#.####.##..#..#
..#..#....#.###
.#....#.#.#....
.........#..###

....###.#..
#...#...###
#...#...###
....###.#..
.......#.#.
#.##.##.###
##..#..#...
#####..#.##
##..#......
##...#.#.##
#.#..##.#..

..####...##.#
..####....###
##.##.##..###
...##...##.#.
.##..##.#####
##.##.#####..
..####...#.#.
........#...#
###..###..#.#
...##....#...
##....##..###
..####..##.##
##.##.###.##.

##...####...#
...#......##.
#####.##.####
##.#.#..#.#.#
###..#..#..##
....#....#...
...##.##.##..

.##.##...
.#...#...
###.#.###
#......##
.##.#####
###.#..##
.#....#..
##...#...
#.##.#.##
#.##.####
##...#...

####.#..#
...##.###
##.....#.
..#..###.
..#..###.
##.....#.
..###.###
####.#..#
....#.#.#
.##.#..#.
..#..##..
#.##.#.#.
#.##.#.#.
..#..##..
.##.#..#.

...#.#.
###.#..
......#
#####..
##..###
##.....
##.#...
##.#...
##.....
##..###
#####..
...#..#
###.#..

..#.#.#
####.##
######.
...#.#.
...#...
..##..#
...###.
###.##.
#####..
#####..
######.
...###.
..##..#
...#...
...#.#.
######.
####.##

.#..##.#.####
###.##....##.
..#####......
####.#.......
.##..###..##.
....#...#####
####..#.#####
#.##.##.#....
#######......
##.#.....####
#.##.###..##.
#.##.###..##.
##.#.....####
#######......
#.##.#..#....

....#.#...##.....
#..#..###...###.#
#..######..##.##.
#..#.#.#...#.#..#
.......#.##......
.##.##...####....
.....#....####..#

..####...
...##....
...##....
..####...
#.#..#.##
.#.##.#.#
..####...
########.
##...####
#..##..##
##....###
.######..
...##....

#..##.#..#..#.#
#..##.#..#..#.#
#.###...##.###.
....#.####.#.##
.##..#...#.#..#
###.#####..#.##
#.###...###.#.#
#..#.##....#.##
#..#.##....#.##
#.###...###.#.#
###.#####..#.##
.##..#...#.#..#
....#.####.#.##
#.###...##.#.#.
#..##.#..#..#.#

.##.#..#.
####....#
#####..##
.##.####.
.##.####.
..#.#..#.
####....#
#..#.##.#
....#..#.
####.##.#
.##.#..#.
####.##.#
.##......

....#..##..##
....#..##..##
..###.....##.
####.##..#.#.
#..#.#.#....#
.##.#.#..#.##
.#..##..#..##
#.#.....#.#..
###.....#.#..
.#..##..#..##
.##.#.#..#.##
#..#.#.#....#
####.##..#.#.
..###.....##.
....#..##..##

##.#.######.#
....##.##.##.
#####.#..#.##
##.##..##..##
...#.##..##.#
..##..####..#
..#....##....
##.###.##.#.#
####.#....#.#

.###.....###.##
####.#.##..#.#.
###..#.##..#.#.
.###.....###.##
#.#######.#..#.
#..#...#.#.#...
#...#.#####..#.
#...#.#####..#.
#..#...#.#.#...
#.#######.#..#.
.###.....###.##
###..#.##..#.#.
####.#.##..#.#.
.###.....###.##
.#....###.#.#..

..##.#....#
.######.##.
.######.##.
..##.#....#
.#.##.#....
###.##.####
##..#..###.
...#..#.#.#
###...#.#.#
###...#.#.#
...#..#.#.#
##..#..###.
.##.##.####
.#.##.#....
..##.#....#

#..#......###..
#..#......###..
#.####........#
#..##.....##..#
#..#.#######..#
.##..#...#...##
.....####..#...
#..##..##.#.#..
.##.###.#..#.##

###.###..
###.###..
..#.#.#.#
####.....
..#.....#
#....##..
###.##.##
#####..#.
#####..#.
###.#..##
#....##..

.###.#.##.#.###.#
##..#..##..#..###
#..##.#..#.##..##
##..#.#..#.#..##.
...###....###...#
.#...##..##...#..
..........#......
#....######....#.
..####.##.####...
.###.#.##.#.###.#
######.##.#######
##....#..#....###
##.#.#....#.#.##.
##.#.#....#.#.##.
##....#..#....###
######.##.#######
.###.#.##.#.###.#

.#.#..###..##
#.##.#####...
####.#..#.#..
.##...#.#####
#..#..###....
#..###.......
###..#.#.##..
..###.##.####
..#.#.##.####
###..#.#.##..
#..###.......
#..#..###....
.##...#.#####
####.#..#.#..
#.##.#####...
.#.#..###..##
##....#######

#.###...#.#####
######.#.####.#
#....##...##.#.
#....##...##.#.
######.#.####.#
#.###...#.#####
####..#.#..#..#
.##.###.##.##..
....########..#
##.##..###..#.#
##.##..###..#.#
....########..#
.##.###.##.##.#
####..#.#..#..#
#.###...#.#####

....##...
#######..
.......#.
....#.#..
####..#.#
#####...#
####.#..#
.....#.##
.##.#.#..
######.#.
.....#.##
.....###.
#####..#.
####.###.
######.##

.#...#.####..
.#...#.####..
..########...
.###..#.#.#..
#...#....#.##
.......#...#.
.#.######.#.#
###.#.#.####.
....###..##.#
...#.#.####..
...#.#.####..
....###..##.#
###.#.#.####.
.#.######.#.#
..#....#...#.
#...#....#.##
.###..#.#.#..

#.#..######
#.#.#######
.##.##....#
#..........
###.##.##.#
.##########
##.#...##..

....####..###
##.###.####.#
##..#........
##.#.#......#
..#.#.#.##.#.
....#.#....#.
..##.###..###
###.##..##..#
...##...##.#.
..#.....##...
###.##......#

.##..#.#..#..
#.....#######
#.#####.##...
#######..####
.####..####..
.####...###..
#######..####
#.#####.##...
#.....#######

.#.##....##.#....
.#.##....##.#....
####.####.#####..
#.##########.#.#.
.#.##....##.#..#.
####......#####.#
#...######......#
#.#.######.#.#..#
#.##.####.##.#.##
..#........#.....
#.#...##...#.#.##

####....#
##.#....#
.########
#..######
#.#......
#.#######
##..####.

###........##.##.
###...###.#..#...
#####.#.....#####
..#.##........#.#
..#.##........#.#
#####.#.....#####
###...###.#..##..
###........##.##.
######.###...#...
##..##.##.###.#.#
#####.#.##..#....
...#..#..#..#.##.
...##.####..###..
##.#....##.#....#
##.#.##.#####.###

#...#.##.
.###.#...
.#####...
#...#.##.
.......##
#.#...###
#.#...###

..#.##.###.##.#
.###.#.......##
#..#.#...#..#.#
########..####.
########..####.
#..#.#...#..#.#
.###.#.......##
..#.##.###.##.#
#...#...##.....
#.#..#.###.....
#..##.#.##.####
..#######.###.#
..###########.#

.#..##.
##.##..
##.##..
.#..##.
##.###.
#.#####
#..##.#
####..#
..##..#
..##..#
####...

##..##..##..#
....######...
######..#####
##.##.##.##.#
...########..
###.######.##
###.######.##
#####....####
..#........#.
###........##
##.########.#
..#.#....#.#.
##...####...#
######..#####
..#.##..##.##

#..####
....###
####.##
.##.###
####.#.
.##.#.#
.##.#..
....#.#
....#.#
.##.#..
.##.#.#
######.
.##.###

...######
.#..###.#
####.##.#
#.#.....#
#.#.....#
####.##.#
.#..###.#
...######
####.####
.#..##..#
##..#.##.
.....###.
.#..#.#..
.#..#.#..
.....##..

..#..#..#.#.....#
##.##.##.#...#.#.
##.##.##.#...#.#.
..#..#..#.#.....#
.#######.#..##.##
.........###..##.
.#....#..#.#..##.

......#..#.
..##...#.#.
#######.###
#....#.#..#
######....#
......#..#.
..##.......
##..######.
#.#####..#.
#....#.#.##
..##...#.##
..##......#
..##......#

...#.#..#
...######
..#......
..#######
...#..##.
...#.####
..#.#.##.
..##..##.
..#...##.
##.##.#..
##....##.
..#..#..#
###..#..#

.##.#..###.#...##
#..#.##....#.#..#
.........##.#.###
.##.....###...###
.##.##.#...###.#.
.##.##.#...###.#.
.##.....###...###
.........##.#.###
#..#.##.#..#.#..#

#.###.##.##
#..#......#
#.#.##..##.
.###.#..#.#
.###.#..#.#
#...##..##.
#..#......#
#.###.##.##
####......#

...##.##.#.#.#.
...##.##.#.#.#.
.##...#..##.#.#
.###.#.##..#.#.
....###..#.####
....###..#.####
.###.#.##..#.#.
.##...#..##.#.#
#..##.##.#.#.#.

#..##......##
#.#....##....
##.##.####.##
.#...##..##..
.#.####..####
.##...#..#...
.####.####.##
.#.##..##..##
#..##..##..##
#.#..#.##.#..
#..#.##..##.#
#.###.####.##
##.####..####
#.#....##....
..#..........

.#.##.#.#..##.#
#..##..##......
##....###......
.#....#.##..##.
#.#..#.#..#.##.
#......#.#.#..#
...##...#.#....
...##...#.#.##.
#########.#.##.
##....###......
#.####.#..#.##.

##..........##..#
..####..####..##.
..####..####.....
..##......##..##.
#..#..##..#..####
#.#........#.####
#####.###########

###########..
##.##.##...#.
#.#..#.##.#.#
###..######..
#..##..##....
#..##..##....
###..######..
#.#..#.##.#.#
##.##.##...#.
###########..
.#...##.#.#.#

..#.#.##..##.
....##.#.#.#.
#####......#.
#...#.#####..
##..##.....##
.#.##..###.#.
..###.##..#.#
..###.##..#.#
.#.##..###.#.
##...#.....##
#...#.#####..
#####......#.
....##.#.#.#.
..#.#.##..##.
..#.#.##..##.

..#.#.#..#...
..#.#.#..#...
....#...####.
..##.#.#.#..#
.#.#....#....
#####..#.#.##
.####.##.....
..######.#...
..##.#.#..###
..##...#..###
..######.#...
.####.##.....
#####..#.#.##
.#.#....#....
..##.#.#.#..#
....#...####.
..#.#.#..#...

.##.#.#.#..
.##.#.#.#..
#.####.#.#.
#.##.....##
...#.##.#..
.##.##.#..#
...##.##.#.
#.....#.#.#
#.....###.#
...##.##.#.
.##.##.#..#

.###..###
.##....##
#.#....#.
.########
##.#..#.#
##......#
##..###.#
#.#.##.#.
.#......#
..#....#.
####..###
...#..#..
...#..#..
####..###
..#....#."
        .to_string()
}
