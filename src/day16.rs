use std::collections::HashSet;

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
enum ObjectType {
    EmptySpace,
    MirrorForward,
    MirrorBackward,
    VerticalSplitter,
    HorizontalSplitter,
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
enum Direction {
    Up,
    Right,
    Down,
    Left,
}

type Point = (usize, usize);

#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
struct Beam {
    head: Point,
    direction: Direction,
}

type Contraption = Vec<Vec<ObjectType>>;

trait Grid {
    fn is_point_within(&self, point: (i32, i32)) -> bool;
}

impl Grid for Contraption {
    fn is_point_within(&self, (x, y): (i32, i32)) -> bool {
        !(x < 0 || x > self.first().unwrap().len() as i32 - 1 || y < 0 || y > self.len() as i32 - 1)
    }
}

fn main() {
    assert_eq!(46, part1(&test_input()));
    assert_eq!(8551, part1(&input()));
    assert_eq!(51, part2(&test_input()));
    assert_eq!(8754, part2(&input()));
}

fn part1(input: &String) -> usize {
    let contraption = parse(input);

    let initial_beam = Beam {
        head: (0, 0),
        direction: Direction::Right,
    };

    count_energized_tiles(&contraption, initial_beam)
}

fn count_energized_tiles(contraption: &Contraption, initial_beam: Beam) -> usize {
    let mut energized_tiles: HashSet<(usize, usize, Direction)> = HashSet::new();
    let mut stack: Vec<Beam> = vec![initial_beam];

    while !stack.is_empty() {
        let mut beam = stack.pop().expect("The stack shouldn't be empty");

        if energized_tiles.contains(&(beam.head.0, beam.head.1, beam.direction)) {
            // We've already run down this path, no need to do it again.
            continue;
        }

        energized_tiles.insert((beam.head.0, beam.head.1, beam.direction));

        match (beam.direction, contraption[beam.head.1][beam.head.0]) {
            (Direction::Up, ObjectType::MirrorForward) => {
                beam.direction = Direction::Right;
            }
            (Direction::Up, ObjectType::MirrorBackward) => {
                beam.direction = Direction::Left;
            }
            (Direction::Up, ObjectType::VerticalSplitter) => (),
            (Direction::Up, ObjectType::HorizontalSplitter) => {
                beam.direction = Direction::Right;

                stack.push(Beam {
                    head: beam.head,
                    direction: Direction::Left,
                });
            }

            (Direction::Right, ObjectType::MirrorForward) => {
                beam.direction = Direction::Up;
            }
            (Direction::Right, ObjectType::MirrorBackward) => {
                beam.direction = Direction::Down;
            }
            (Direction::Right, ObjectType::VerticalSplitter) => {
                beam.direction = Direction::Up;

                stack.push(Beam {
                    head: beam.head,
                    direction: Direction::Down,
                });
            }
            (Direction::Right, ObjectType::HorizontalSplitter) => (),

            (Direction::Down, ObjectType::MirrorForward) => {
                beam.direction = Direction::Left;
            }
            (Direction::Down, ObjectType::MirrorBackward) => {
                beam.direction = Direction::Right;
            }
            (Direction::Down, ObjectType::VerticalSplitter) => (),
            (Direction::Down, ObjectType::HorizontalSplitter) => {
                beam.direction = Direction::Right;

                stack.push(Beam {
                    head: beam.head,
                    direction: Direction::Left,
                });
            }

            (Direction::Left, ObjectType::MirrorForward) => {
                beam.direction = Direction::Down;
            }
            (Direction::Left, ObjectType::MirrorBackward) => {
                beam.direction = Direction::Up;
            }
            (Direction::Left, ObjectType::VerticalSplitter) => {
                beam.direction = Direction::Up;

                stack.push(Beam {
                    head: beam.head,
                    direction: Direction::Down,
                });
            }
            (Direction::Left, ObjectType::HorizontalSplitter) => (),

            (_, ObjectType::EmptySpace) => (),
        };

        let next_point = next_point(&beam);

        if !contraption.is_point_within(next_point) {
            // This beam goes out of the contraption, no need to keep tracking it.
            continue;
        }

        beam.head = (next_point.0 as usize, next_point.1 as usize);

        stack.push(beam);
    }

    HashSet::<(usize, usize)>::from_iter(energized_tiles.iter().map(|(x, y, _)| (*x, *y))).len()
}

fn next_point(beam: &Beam) -> (i32, i32) {
    match beam.direction {
        Direction::Up => (beam.head.0 as i32, beam.head.1 as i32 - 1),
        Direction::Right => (beam.head.0 as i32 + 1, beam.head.1 as i32),
        Direction::Down => (beam.head.0 as i32, beam.head.1 as i32 + 1),
        Direction::Left => (beam.head.0 as i32 - 1, beam.head.1 as i32),
    }
}

fn part2(input: &String) -> usize {
    let contraption = parse(input);

    let width = contraption
        .first()
        .expect("The contraption should have at least one row")
        .len();
    let height = contraption.len();

    let mut most_energized_tiles = 0;

    for x in 0..width {
        let energized_tiles = count_energized_tiles(
            &contraption,
            Beam {
                head: (x, height - 1),
                direction: Direction::Up,
            },
        );

        if energized_tiles > most_energized_tiles {
            most_energized_tiles = energized_tiles;
        }

        let energized_tiles = count_energized_tiles(
            &contraption,
            Beam {
                head: (x, 0),
                direction: Direction::Down,
            },
        );

        if energized_tiles > most_energized_tiles {
            most_energized_tiles = energized_tiles;
        }
    }

    for y in 0..height {
        let energized_tiles = count_energized_tiles(
            &contraption,
            Beam {
                head: (0, y),
                direction: Direction::Right,
            },
        );

        if energized_tiles > most_energized_tiles {
            most_energized_tiles = energized_tiles;
        }

        let energized_tiles = count_energized_tiles(
            &contraption,
            Beam {
                head: (width - 1, y),
                direction: Direction::Left,
            },
        );

        if energized_tiles > most_energized_tiles {
            most_energized_tiles = energized_tiles;
        }
    }

    most_energized_tiles
}

fn parse(input: &str) -> Contraption {
    input
        .split("\n")
        .map(|line| {
            line.chars()
                .map(|ch| match ch {
                    '.' => ObjectType::EmptySpace,
                    '/' => ObjectType::MirrorForward,
                    '\\' => ObjectType::MirrorBackward,
                    '|' => ObjectType::VerticalSplitter,
                    '-' => ObjectType::HorizontalSplitter,
                    other => panic!("'{other}' cannot be parsed to an ObjectType"),
                })
                .collect()
        })
        .collect()
}

#[allow(dead_code)]
fn test_input() -> String {
    r".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|...."
        .to_string()
}

#[allow(dead_code)]
fn input() -> String {
    r"\..|.....................|.-........\.............-................|./....|.....-...-.........................
.......\.........|..............-...||..............-...........--.|...............||..........\............|.
........../.....................\.........\..................\....|.....-.................../..-.\............
................/..../........../..-....|\.|...-...................\....|/........|...........................
.....|../-\.|....|................................--.-./..........|.........../..-....-................-....|.
.../..........\................-.......\................|/..\.................\.....\...|....../............./
..-../.../......-.....\........//.............|.........../...|.........../.......-...........................
......\....../......./..|\............/..........................\..............\.....\.........|......-...|..
.|/.......\.........|...../..//...................................-....-...........././-...............-......
........-....../......./..\.............|.....................\........../-....../........-...................
......-........./\..................../..\|..-//....|.\--................|.....|.../............-............\
........................|...-........|..............|..............|................./........................
...................|................|..../...-...................../...|......\..................|...|\.......
....-......../.\...............\-...\...........................................................|.............
.............../.|.......|.........\.\.........................-|.............\........-.../...-...||.........
....-...-\.-............/...../...../..\........\|....\...............\.............-........................\
........././.......//......-...|...........-...|..|....-......-.......|............................|../.......
\.................|..../.....-..|......./.....................\....../...|./\.\...............-............./.
.....-\............../...................................../....\.....-|...........-.\...../............\.....
......................./..\..................|...............-.........-..../......../..|.....................
....\...................../...../......|...........................\......||.\...-..............-...........|.
..........................|........../...........|....-.......\........................-|..\............/..|..
-./...|..............................................|./../.........-|.\.|..........\........../.........\....
...........|......................-............................|.........................\....-........../....
........................|/....\......../.|.......\.........../..................\........................-....
...../.................-............................-.\......|...............\...........\.....-.............-
....|-.............-.../....\...........-...........|\.............-.............../-....../..................
...............\/.............../.|............................/.|...................-............-...........
.................\.....\........./......../.....\.....|........-..\..........................|................
...............-..-........-........../...../...\.................\..-.-.....|..........\..............\......
.............-....../....|.\\............|......|.........-.......|................/.......|./............\...
.................................................\.......\-....\.........|.....-..|.........-................/
.............../..............\..........................\.................-\............-............-.......
/....|...../.....................................................-....\.....-................../..........-..\
.....\.....................-...........|...\.....-...../.......-.|.................|..........................
.............-..........-....-....-.-../....|.......-.\.........................-........../..../.....\.......
..........\\.........................../...-........./........\............|.........../......................
............-......|..................................................................-......./...-...........
........\............-......|....\............................\.\........|......................../......\...-
......../...|........|..-.-.../..../..........|........|....../....../../...........\.............\....../....
......|.........-........//........-../....\........./..........|.-......-...-......-.............\..|........
./......................../................-..........................................-.....--....|...........
....../............\\..../\............|..-.|.|.-.............-........|................................./.../
..-......../.......|.......|........................-....-..............................-.....................
.........||............|.\................|......................./.\...............-..........|..../..-..\...
\|.......|..\..........-.................../|.....-.............\............./....................../........
.....................|....-.../...............\.\.............................................................
............|.......................\...........-......|...././.-...../................|........-..........\.\
..........|../\.|.......|\..-............\.-..............-....../...\......||..\........-.\..../...\......./|
..|.....................................-\............//.......|..\..............\.........|....|.............
.....\...............................-........./..........\.........-....|..........-./../...\................
.....\./....-...\....................\|.........\.............-...\..........-...............|............./..
/./\......\.........\........-../......../.....|/..................../.././..-......................|\........
.|\...-.\\.......................|........-\.....|......|......./|..........-..../...................|.|......
...........\.............\./....|./.............................|.............................................
.../...../.|.................\...../.....-..............|.\.\../.................../.............\............
..............\............-........-........\....../............|....|...\....\...|.....-..../...............
/.\.\........-....\.|....-....\..../...-./...............-.......\../........./..../........./.......\........
|..............................-..\............................\......//........\../...-../..\......../.......
.............\.../.\............\--............|................-|............|......../......................
...../....|................................-.....................................|./..........|.........\.\\..
........./......-.....|............/.-.......\..-.......................................|..................\..
.......\.\.....................-|...../.....|........|............-..............-....../\..\....../..........
|..\.|........../|..\..|\..-...................\.................../.....-/...............|................../
...........|..-..............|........................-..............-...............-.............\.........\
...\./.....-...|.-.......-................/.\.....-..-...|......-.......................................--...|
...............-.........|............-............|./.......\...../.....\............-.\.....................
..................|......|..........-..............................-....|............|.\........./..-.........
|......................../.....-../|.....\./..\....|......................./........................./...\....
....|............-........\..-...............-................/\..........................|........|.......\-.
|......./.....\.......\..................-.\..../....|............|.../..................../|.../........../..
...-|..................||......--......\......|.............|\........./.................\......\........\....
./........./........-...................................\......-......................................-.....-.
.....\..-\-....\........................|........../.......|.........-.............................///........
./.............\........./.................|.....................|..\.........../...|...|..\.|............-...
.................................\.................................\...........................-.........-....
...................\....|...............|...............\..../.....-.....................................\....
.../.......-.......|...........|.....\..................../......................|../.............\...........
......-....................../..../.....-..............\............./...........-.....\....|...............|.
......-.......-.......|..................\................-...|./.......--............../.......|.-.|.........
-..................\........../..........................-...-.............../..............................|.
............/.........-..../\..-.....\....\........./.........\.........../.........|/.../....................
...................................../.....|..\.............\..........-.......\............../.............|.
..../........./.........................-.......\..|..|.....--|...../.............../..-/./.......|..../|.....
.........\.|...|..|-...................................\../..-.....|....\....................-................
..../..-......|..............\../............./..........-.|......../..........|.\........|..................-
......|.................\..........\|...................-.../.\.........../.|............../................./
.........................\.................................../-./............................-..-.........|...
\...........-................/....-.-....................................../...../..............\.......-\.../
-....................................\.........................../.............................|..............
......................\............\.......\..\.............\.................-....\....-.|...................
.|-.-...../......./............./........|.................../.........-..\........./.\|...........-..........
.......\..............\.....-..........\.|.\...|.........\/..........\......|.\...................-...........
../.-..................../..................|.....-...-....-............................-.-..-../..\..........
.................................-.......|...../.\.................\..../................................-....
.-..|.....|.........-........|....-.........../...........\......-..........................\.................
..-.................../...|..-..|...................../...-...|........................................./|....
.........................-\............................./....................../.......-................|.....
........../.......\.........|...-/........./............./......................../...........-../..\.-\...-..
..........|....\-........\...................-.|....-.........\................../.......\....................
/...-..........\......\.........|.............|...........-....../.|..|..-............................|.......
.........\.|........\......\....|.........................................../........-........................
....\.....|.......\....................................-............|.....-........./..\...\.....-..-.........
.|../...../.......|\......\............../....\..|..-...-..............|-.................................-...
.|.\......./........../........|..\.../|......\....|.........-.|.................-.........|............./..-.
...............-.................|...-../\..../.......-.....|..\./............................................
....-.|.........-........................../...................|...............\........................../...
..|/...-..../../...-........-...-.....................................\.......................................
............../....|.....-\.....-................................../\.....................\....-........-.....
......../.|.................|......|.|.-....|...................../....................................\......".to_string()
}
